import json\nimport os\nfrom .errors import ConfigKeyError\n\nclass Config:\n    """\n    Class for loading and accessing the config file.\n    """\n    def __init__(self):\n        self._json = {}\n\n    def load(self, config_filepath: str):\n        if not os.path.exists(config_filepath):\n            raise FileNotFoundError(f"{config_filepath} does not exist.")\n        with open(config_filepath, "r", encoding="utf-8") as f:\n            self._json = json.loads(f.read())\n        return self\n\n    @property\n    def red_key(self) -> str:\n        return self.__get_key("red_key")\n\n    @property\n    def ops_key(self) -> str:\n        return self.__get_key("ops_key")\n\n    @property\n    def server_port(self) -> str:\n        return self.__get_key("port", "9713")\n\n    def __get_key(self, key, default=None):\n        try:\n            return self._json[key]\n        except KeyError:\n            if default is not None:\n                return default\n            raise ConfigKeyError(f"Key '{key}' not found in config file.")\n