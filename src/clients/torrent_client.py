import os\nfrom urllib.parse import urlparse, unquote\nfrom src.filesystem import sane_join\n\nclass TorrentClient:\n    def __init__(self, torrent_label="fertilizer"):\n        self.torrent_label = torrent_label\n\n    def setup(self):\n        raise NotImplementedError("This method should be overridden by subclasses.")\n\n    def get_torrent_info(self, infohash):\n        raise NotImplementedError("This method should be overridden by subclasses.")\n\n    def inject_torrent(self, source_torrent_infohash, new_torrent_filepath, save_path_override=None):\n        raise NotImplementedError("This method should be overridden by subclasses.")\n\n    def _extract_credentials_from_url(self, url, base_path=None):\n        parsed_url = urlparse(url)\n        username = unquote(parsed_url.username) if parsed_url.username else ""\n        password = unquote(parsed_url.password) if parsed_url.password else ""\n        origin = f"{parsed_url.scheme}://{parsed_url.hostname}:{parsed_url.port}" if parsed_url.port else f"{parsed_url.scheme}://{parsed_url.hostname}"\n\n        if base_path is not None:\n            href = sane_join(origin, os.path.normpath(base_path))\n        else:\n            href = sane_join(origin, (parsed_url.path if parsed_url.path != "/" else ""))\n\n        return href, username, password\n\n    def _determine_label(self, torrent_info):\n        current_label = torrent_info.get("label", "")\n\n        if not current_label:\n            return self.torrent_label\n\n        if current_label == self.torrent_label or current_label.endswith(f".{self.torrent_label}"):\n            return current_label\n\n        return f"{current_label}.{self.torrent_label}"\n