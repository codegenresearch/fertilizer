import os\\nfrom .api import RedAPI, OpsAPI\\\\\nfrom .filesystem import mkdir_p, list_files_of_extension, assert_path_exists\\\\\nfrom .progress import Progress\\\\\nfrom .torrent import generate_new_torrent_from_file\\\\\nfrom .parser import get_bencoded_data, calculate_infohash\\\\\nfrom .errors import (\\\\\n  TorrentDecodingError,\\\\\n  UnknownTrackerError,\\\\\n  TorrentNotFoundError,\\\\\n  TorrentAlreadyExistsError,\\\\\n  TorrentExistsInClientError\\\\\n)\\\nfrom .injection import Injection\\\\n\\\\n\\\\ndef scan_torrent_file(source_torrent_path: str, output_directory: str, red_api: RedAPI, ops_api: OpsAPI, injector: Injection | None) -> str:\\\"\"\"\\\n  Scans a single .torrent file and generates a new one using the tracker API.\\\\\n  Args:\\\\\n    `source_torrent_path` (`str`): The path to the .torrent file.\\\\\n    `output_directory` (`str`): The directory to save the new .torrent files.\\\\\n    `red_api` (`RedAPI`): The pre-configured RED tracker API.\\\\\n    `ops_api` (`OpsAPI`): The pre-configured OPS tracker API.\\\\\n    `injector` (`Injection`): The pre-configured torrent Injection object.\\\\\n  Returns:\\\\\n    str: The path to the new .torrent file.\\\\\n  Raises:\\\\\n    See `generate_new_torrent_from_file`.\\\\