import os\nimport copy\nimport bencoder\nfrom hashlib import sha1\nfrom .utils import flatten\nfrom .trackers import RedTracker, OpsTracker\nfrom .errors import TorrentDecodingError\n\ndef is_valid_infohash(infohash: str) -> bool:\n    """Check if the provided infohash is a valid SHA-1 hash."""\n    if not isinstance(infohash, str) or len(infohash) != 40:\n        return False\n    try:\n        int(infohash, 16)\n        return True\n    except ValueError:\n        return False\n\ndef get_source(torrent_data: dict) -> bytes | None:\n    """Retrieve the source from torrent data."""\n    try:\n        return torrent_data[b"info"][b"source"]\n    except KeyError:\n        return None\n\ndef get_name(torrent_data: dict) -> bytes | None:\n    """Retrieve the name from torrent data."""\n    try:\n        return torrent_data[b"info"][b"name"]\n    except KeyError:\n        return None\n\ndef get_announce_url(torrent_data: dict) -> list[bytes] | None:\n    """Retrieve announce URLs from torrent data."""\n    announce = torrent_data.get(b"announce")\n    trackers = torrent_data.get(b"trackers")\n\n    if announce:\n        return [announce] if isinstance(announce, bytes) else announce\n    elif trackers:\n        return flatten(trackers)\n\n    return None\n\ndef get_origin_tracker(torrent_data: dict) -> RedTracker | OpsTracker | None:\n    """Determine the origin tracker based on torrent data."""\n    source = get_source(torrent_data) or b""\n    announce_url = get_announce_url(torrent_data) or []\n\n    if source in RedTracker.source_flags_for_search() or any(RedTracker.announce_url() in url for url in announce_url):\n        return RedTracker\n\n    if source in OpsTracker.source_flags_for_search() or any(OpsTracker.announce_url() in url for url in announce_url):\n        return OpsTracker\n\n    return None\n\ndef calculate_infohash(torrent_data: dict) -> str:\n    """Calculate the infohash of the torrent data."""\n    try:\n        return sha1(bencoder.encode(torrent_data[b"info"]))\n            .hexdigest()\n            .upper()\n    except KeyError as e:\n        raise TorrentDecodingError("Torrent data does not contain 'info' key") from e\n\ndef recalculate_hash_for_new_source(torrent_data: dict, new_source: (bytes | str)) -> str:\n    """Recalculate the infohash for a new source."""\n    torrent_data = copy.deepcopy(torrent_data)\n    torrent_data[b"info"][b"source"] = new_source\n\n    return calculate_infohash(torrent_data)\n\ndef get_bencoded_data(filename: str) -> dict:\n    """Read and decode bencoded data from a file."""\n    try:\n        with open(filename, "rb") as f:\n            data = bencoder.decode(f.read())\n        return data\n    except Exception:\n        return None\n\ndef save_bencoded_data(filepath: str, torrent_data: dict) -> str:\n    """Save bencoded data to a file, creating parent directories if necessary."""\n    parent_dir = os.path.dirname(filepath)\n    if parent_dir:\n        os.makedirs(parent_dir, exist_ok=True)\n\n    with open(filepath, "wb") as f:\n        f.write(bencoder.encode(torrent_data))\n\n    return filepath\n