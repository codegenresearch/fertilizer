import os\nfrom colorama import Fore, init\nfrom src.api import RedAPI, OpsAPI\nfrom src.args import parse_args\nfrom src.config import Config\nfrom src.scanner import scan_torrent_directory, scan_torrent_file\nfrom src.webserver import run_webserver\n\ninit(autoreset=True)\n\ndef cli_entrypoint(args):\n    try:\n        config = Config().load(args.config_file)\n        red_api, ops_api = __verify_api_keys(config)\n\n        if args.server:\n            run_webserver(args.input_directory, args.output_directory, red_api, ops_api, port=os.environ.get("PORT", 9713))\n        elif args.input_file:\n            result = scan_torrent_file(args.input_file, args.output_directory, red_api, ops_api)\n            print(result if result else "No new torrent file generated.")\n        elif args.input_directory:\n            report = scan_torrent_directory(args.input_directory, args.output_directory, red_api, ops_api)\n            print(report if report else "No report generated.")\n    except Exception as e:\n        print(f"{Fore.RED}{str(e)}")\n        exit(1)\n\ndef __verify_api_keys(config):\n    red_api = RedAPI(config.get('red_key', ''))\n    ops_api = OpsAPI(config.get('ops_key', ''))\n    try:\n        # This will perform a lookup with the API and raise if there was a failure.\n        # Also caches the announce URL for future use which is a nice bonus\n        red_api.announce_url = red_api.announce_url or ''\n        ops_api.announce_url = ops_api.announce_url or ''\n    except Exception as e:\n        print(f"{Fore.RED}API verification failed: {str(e)}")\n        exit(1)\n    return red_api, ops_api\n\nif __name__ == "__main__":\n    args = parse_args()\n    try:\n        cli_entrypoint(args)\n    except KeyboardInterrupt:\n        print(f"{Fore.RED}Exiting...")\n        exit(1)\n