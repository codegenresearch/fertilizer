import os\nfrom .helpers import get_torrent_path, SetupTeardown\nfrom src.trackers import RedTracker, OpsTracker\nfrom src.parser import (\n  is_valid_infohash,\n  get_source,\n  get_name,\n  get_bencoded_data,\n  get_announce_url,\n  get_origin_tracker,\n  recalculate_hash_for_new_source,\n  save_bencoded_data,\n  calculate_infohash,\n  TorrentDecodingError,\n)\n\nclass TestTorrentFunctions(SetupTeardown):\n  def setup_method(self):\n    self.torrent_data = {b"info": {b"source": b"RED"}}\n\n  def teardown_method(self):\n    try:\n      os.remove("/tmp/test_save_bencoded_data.torrent")\n    except FileNotFoundError:\n      pass\n\n  def test_is_valid_infohash(self):\n    assert is_valid_infohash("0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33")\n    assert not is_valid_infohash("abc")\n    assert not is_valid_infohash("mnopqrstuvwx")\n    assert not is_valid_infohash("Ubeec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33")\n    assert not is_valid_infohash(123)\n\n  def test_get_source(self):\n    assert get_source({b"info": {b"source": b"FOO"}}) == b"FOO"\n    assert get_source({}) is None\n\n  def test_get_name(self):\n    assert get_name({b"info": {b"name": b"foo"}}) == b"foo"\n    assert get_name({}) is None\n\n  def test_get_announce_url(self):\n    assert get_announce_url({b"announce": b"https://foo.bar"}) == [b"https://foo.bar"]\n    assert get_announce_url({b"trackers": [[b"https://foo.bar"], b"https://baz.qux"]}) == [b"https://foo.bar", b"https://baz.qux"]\n    assert get_announce_url({}) is None\n\n  def test_get_origin_tracker(self):\n    assert get_origin_tracker({b"info": {b"source": b"RED"}}) == RedTracker\n    assert get_origin_tracker({b"info": {b"source": b"PTH"}}) == RedTracker\n    assert get_origin_tracker({b"info": {b"source": b"OPS"}}) == OpsTracker\n    assert get_origin_tracker({b"announce": b"https://flacsfor.me/123abc"}) == RedTracker\n    assert get_origin_tracker({b"announce": b"https://home.opsfet.ch/123abc"}) == OpsTracker\n    assert get_origin_tracker({b"trackers": [[b"https://flacsfor.me/123abc"], b"https://baz.qux"]}) == RedTracker\n    assert get_origin_tracker({b"trackers": [[b"https://home.opsfet.ch/123abc"], b"https://baz.qux"]}) == OpsTracker\n    assert get_origin_tracker({}) is None\n    assert get_origin_tracker({b"info": {b"source": b"FOO"}}) is None\n    assert get_origin_tracker({b"announce": b"https://foo/123abc"}) is None\n\n  def test_calculate_infohash(self):\n    result = calculate_infohash(self.torrent_data)\n    assert result == "FD2F1D966DF7E2E35B0CF56BC8510C6BB4D44467"\n\n  def test_recalculate_hash_for_new_source(self):\n    new_source = b"OPS"\n    result = recalculate_hash_for_new_source(self.torrent_data, new_source)\n    assert result == "4F36F59992B6F7CB6EB6C2DEE06DD66AC81A981B"\n    assert self.torrent_data == {b"info": {b"source": b"RED"}}\n\n  def test_get_torrent_data(self):\n    result = get_bencoded_data(get_torrent_path("no_source"))\n    assert isinstance(result, dict)\n    assert b"info" in result\n    result = get_bencoded_data(get_torrent_path("broken"))\n    assert result is None\n\n  def test_save_torrent_data(self):\n    filename = "/tmp/test_save_bencoded_data.torrent"\n    save_bencoded_data(filename, self.torrent_data)\n    with open(filename, "rb") as f:\n      result = f.read()\n    assert result == b"d4:infod6:source3:REDee"\n    assert save_bencoded_data(filename, self.torrent_data) == filename