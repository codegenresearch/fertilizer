import base64\nimport pytest\nimport requests_mock\n\nfrom tests.helpers import SetupTeardown, get_torrent_path\nfrom tests.support.deluge_matchers import (\n    add_label_matcher,\n    add_torrent_matcher,\n    apply_label_matcher,\n    auth_matcher,\n    connected_matcher,\n    get_labels_matcher,\n    label_plugin_matcher,\n    torrent_info_matcher,\n)\n\nfrom src.errors import TorrentClientError, TorrentClientAuthenticationError\nfrom src.clients.deluge import Deluge\n\n\n@pytest.fixture\ndef api_url():\n    return "http://localhost:8112/json"\n\n\n@pytest.fixture\ndef deluge_client():\n    return Deluge("http://:supersecret@localhost:8112/json")\n\n\n@pytest.fixture\ndef torrent_info_response():\n    return {\n        "name": "foo.torrent",\n        "state": "Seeding",\n        "progress": 100.0,\n        "save_path": "/tmp/bar/",\n        "label": "fertilizer",\n        "total_remaining": 0.0,\n    }\n\n\nclass TestSetup(SetupTeardown):\n    def test_sets_auth_cookie(self, api_url, deluge_client):\n        assert deluge_client._deluge_cookie is None\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=auth_matcher,\n                json={"result": True},\n                headers={"Set-Cookie": "supersecret"},\n            )\n            m.post(api_url, additional_matcher=connected_matcher, json={"result": True})\n            m.post(api_url, additional_matcher=label_plugin_matcher, json={"result": ["Label"]})\n\n            response = deluge_client.setup()\n\n            assert response\n            assert deluge_client._deluge_cookie is not None\n\n    def test_raises_exception_on_failed_auth(self, api_url, deluge_client):\n        with requests_mock.Mocker() as m:\n            m.post(api_url, additional_matcher=auth_matcher, json={"result": False})\n\n            with pytest.raises(TorrentClientError) as excinfo:\n                deluge_client.setup()\n\n            assert "Reached Deluge RPC endpoint but failed to authenticate" in str(excinfo.value)\n\n    def test_sets_label_plugin_enabled_when_true(self, api_url, deluge_client):\n        assert not deluge_client._label_plugin_enabled\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=auth_matcher,\n                json={"result": True},\n                headers={"Set-Cookie": "supersecret"},\n            )\n            m.post(api_url, additional_matcher=connected_matcher, json={"result": True})\n            m.post(api_url, additional_matcher=label_plugin_matcher, json={"result": ["Label"]})\n\n            deluge_client.setup()\n\n            assert deluge_client._label_plugin_enabled\n\n    def test_sets_label_plugin_enabled_when_false(self, api_url, deluge_client):\n        assert not deluge_client._label_plugin_enabled\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=auth_matcher,\n                json={"result": True},\n                headers={"Set-Cookie": "supersecret"},\n            )\n            m.post(api_url, additional_matcher=connected_matcher, json={"result": True})\n            m.post(api_url, additional_matcher=label_plugin_matcher, json={"result": []})\n\n            deluge_client.setup()\n\n            assert not deluge_client._label_plugin_enabled\n\n\nclass TestGetTorrentInfo(SetupTeardown):\n    def test_returns_torrent_details(self, api_url, deluge_client, torrent_info_response):\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            response = deluge_client.get_torrent_info("foo")\n\n            assert response == {\n                "complete": True,\n                "label": "fertilizer",\n                "save_path": "/tmp/bar/",\n            }\n\n    def test_raises_if_no_torrents_returned(self, api_url, deluge_client):\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={"result": {}},\n            )\n\n            with pytest.raises(TorrentClientError) as excinfo:\n                deluge_client.get_torrent_info("foo")\n\n            assert "Client returned unexpected response (object missing)" in str(excinfo.value)\n\n    def test_raises_if_torrent_not_found(self, api_url, deluge_client):\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={"result": {"torrents": {}}},\n            )\n\n            with pytest.raises(TorrentClientError) as excinfo:\n                deluge_client.get_torrent_info("foo")\n\n            assert "Torrent not found in client (foo)" in str(excinfo.value)\n\n    def test_returns_completed_if_paused_and_finished(self, api_url, deluge_client, torrent_info_response):\n        torrent_info_response["state"] = "Paused"\n        torrent_info_response["progress"] = 100.0\n        torrent_info_response["total_remaining"] = 0\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            response = deluge_client.get_torrent_info("foo")\n\n            assert response["complete"]\n\n    def test_returns_completed_if_seeding(self, api_url, deluge_client, torrent_info_response):\n        torrent_info_response["state"] = "Seeding"\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            response = deluge_client.get_torrent_info("foo")\n\n            assert response["complete"]\n\n\nclass TestInjectTorrent(SetupTeardown):\n    def test_injects_torrent(self, api_url, deluge_client, torrent_info_response):\n        torrent_path = get_torrent_path("red_source")\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            m.post(\n                api_url,\n                additional_matcher=add_torrent_matcher,\n                json={"result": "abc123"},\n            )\n\n            response = deluge_client.inject_torrent("foo", torrent_path)\n            request_params = m.request_history[1].json()["params"]\n\n            assert response == "abc123"\n            assert request_params[0] == "red_source.fertilizer.torrent"\n            assert request_params[1] == base64.b64encode(open(torrent_path, "rb").read()).decode()\n            assert request_params[2] == {"download_location": "/tmp/bar/", "seed_mode": True, "add_paused": False}\n\n    def test_uses_save_path_override_if_present(self, api_url, deluge_client, torrent_info_response):\n        torrent_path = get_torrent_path("red_source")\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            m.post(\n                api_url,\n                additional_matcher=add_torrent_matcher,\n                json={"result": "abc123"},\n            )\n\n            deluge_client.inject_torrent("foo", torrent_path, "/tmp/override/")\n            request_params = m.request_history[1].json()["params"]\n\n            assert request_params[2] == {"download_location": "/tmp/override/", "seed_mode": True, "add_paused": False}\n\n    def test_raises_if_torrent_not_complete(self, api_url, deluge_client, torrent_info_response):\n        torrent_info_response["state"] = "Paused"\n        torrent_info_response["progress"] = 50.0\n        torrent_info_response["total_remaining"] = 50.0\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            with pytest.raises(TorrentClientError) as excinfo:\n                deluge_client.inject_torrent("foo", get_torrent_path("red_source"))\n\n            assert "Cannot inject a torrent that is not complete" in str(excinfo.value)\n\n    def test_sets_label(self, api_url, deluge_client, torrent_info_response):\n        torrent_path = get_torrent_path("red_source")\n        deluge_client._label_plugin_enabled = True\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            m.post(api_url, additional_matcher=add_torrent_matcher, json={"result": "abc123"})\n            m.post(api_url, additional_matcher=get_labels_matcher, json={"result": ["fertilizer"]})\n            m.post(api_url, additional_matcher=apply_label_matcher, json={"result": True})\n\n            deluge_client.inject_torrent("foo", torrent_path)\n\n            assert m.request_history[-1].json()["params"] == ["abc123", "fertilizer"]\n            assert m.request_history[-1].json()["method"] == "label.set_torrent"\n\n    def test_adds_label_if_doesnt_exist(self, api_url, deluge_client, torrent_info_response):\n        torrent_path = get_torrent_path("red_source")\n        deluge_client._label_plugin_enabled = True\n\n        with requests_mock.Mocker() as m:\n            m.post(\n                api_url,\n                additional_matcher=torrent_info_matcher,\n                json={\n                    "result": {\n                        "torrents": {"foo": torrent_info_response},\n                    },\n                },\n            )\n\n            m.post(api_url, additional_matcher=add_torrent_matcher, json={"result": "abc123"})\n            m.post(api_url, additional_matcher=get_labels_matcher, json={"result": []})\n            m.post(api_url, additional_matcher=add_label_matcher, json={"result": []})\n            m.post(api_url, additional_matcher=apply_label_matcher, json={"result": True})\n\n            deluge_client.inject_torrent("foo", torrent_path)\n\n            assert m.request_history[-2].json()["params"] == ["fertilizer"]\n            assert m.request_history[-2].json()["method"] == "label.add"\n